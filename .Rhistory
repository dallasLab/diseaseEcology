pdf(file="figs/bmeta_fig.pdf", width=3, height=3)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=10, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=10, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=10, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=2, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmetaCent$close, breaks = seq(min(bmetaCent$close, na.rm=T), max(bmetaCent$close, na.rm=T), len = 100),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmeta)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(log(bmetaCent$close), breaks = seq(min(log(bmetaCent$close), na.rm=T), max(log(bmetaCent$close), na.rm=T), len = 100),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmeta)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
n-1 equal sized bins
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmetaCent$close, breaks = seq(min(bmetaCent$close, na.rm=T), max(bmetaCent$close, na.rm=T), len = 100),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmeta)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmetaCent$close, breaks = seq(min(bmetaCent$close, na.rm=T), max(bmetaCent$close, na.rm=T), len = 5),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmeta)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmetaCent$close, breaks = seq(min(bmetaCent$close, na.rm=T), max(bmetaCent$close, na.rm=T), len = 20),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmeta)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmetaCent$close, breaks = seq(min(bmetaCent$close, na.rm=T), max(bmetaCent$close, na.rm=T), len = 30),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmeta)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmetaCent$close, breaks = seq(min(bmetaCent$close, na.rm=T), max(bmetaCent$close, na.rm=T), len = 50),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmeta)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(1)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(2)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(3)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(4)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(5)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(7)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(8)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(6)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(7)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=3, vertex.cex=2, frame.color=NA)
dev.off()
set.seed(7)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=2, vertex.cex=2, frame.color=NA)
dev.off()
bmeta
BirdMeta
Birdweb
Birdweb$network_name
table(Birdweb$network_name)
bsub <- dplyr::filter(Birdweb, network_name=="M_PL_069_01")
View(bsub)
bsub <- dplyr::filter(Birdweb, network_name=="M_PL_069_01") %>% dplyr::select(., species1, species2) %>% unique()
bsub <- igraph::graph_from_data_frame(bsub, directed=F) #Create idgraph object
plot(bsub)
bsub <- delete.vertices(bsub, V(bsub)$component!=which.max(components(bsub)$csize)) #Remove vertices that aren't included in the largest component
plot(bsub)
bsub <- delete.vertices(bsub, V(bsub)$component!=which.max(components(bsub)$csize)) #Remove vertices that aren't included in the largest component
plot(bsub)
components(bsub)$csize
which.max(components(bsub)$csize)
V(bsub)$component
V(bsub)$component <- components(bsub)$membership
bsub <- delete.vertices(bsub, V(bsub)$component!=which.max(components(bsub)$csize)) #Remove vertices that aren't included in the largest component
plot(bsub)
bmsub1Cent <- data.frame(between=igraph::centralization.betweenness(bmeta)$res,
close=igraph::centralization.closeness(bmeta)$res,
node=V(bmeta)$name)
bmsub1Cent
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmsub1Cent$close, breaks = seq(min(bmsub1Cent$close, na.rm=T), max(bmsub1Cent$close, na.rm=T), len = 50),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmsub1Cent)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
ii
V(bmsub1Cent)$color
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bsub)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
ii <- cut(bmsub1Cent$close, breaks = seq(min(bmsub1Cent$close, na.rm=T), max(bmsub1Cent$close, na.rm=T), len = 50),
include.lowest = TRUE)
99
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bsub)$color <- colorRampPalette(c("lightblue", "blue"))(50)[ii]
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmetaCent$close, breaks = seq(min(bmetaCent$close, na.rm=T), max(bmetaCent$close, na.rm=T), len = 99),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmeta)$color <- colorRampPalette(c("lightblue", "blue"))(99)[ii]
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=2, vertex.cex=2, frame.color=NA)
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmetaCent$close, breaks = seq(min(bmetaCent$close, na.rm=T), max(bmetaCent$close, na.rm=T), len = 50),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bmeta)$color <- colorRampPalette(c("lightblue", "blue"))(50)[ii]
plot(bmeta, vertex.label=NA, layout=layout_nicely, vertex.size=2, vertex.cex=2, frame.color=NA)
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmsub1Cent$close, breaks = seq(min(bmsub1Cent$close, na.rm=T), max(bmsub1Cent$close, na.rm=T), len = 10),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bsub)$color <- colorRampPalette(c("lightblue", "blue"))(10)[ii]
colorRampPalette(c("lightblue", "blue"))(10)[ii]
ii
bmsub1Cent$close
bmsub1Cent <- data.frame(between=igraph::centralization.betweenness(bsub)$res,
close=igraph::centralization.closeness(bsub)$res,
node=V(bsub)$name)
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmsub1Cent$close, breaks = seq(min(bmsub1Cent$close, na.rm=T), max(bmsub1Cent$close, na.rm=T), len = 10),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bsub)$color <- colorRampPalette(c("lightblue", "blue"))(10)[ii]
plot(bsub, vertex.label=NA, layout=layout_nicely, vertex.size=2, vertex.cex=2, frame.color=NA)
plot(bsub, vertex.label=NA, layout=layout_nicely, vertex.size=15, vertex.cex=2, frame.color=NA)
plot(bsub, vertex.label=NA, layout=layout_nicely, vertex.size=12, vertex.cex=2, frame.color=NA)
plot(bsub, vertex.label=NA, layout=layout_nicely, vertex.size=12, vertex.cex=2, frame.color="Red")
plot(bsub, vertex.label=NA, layout=layout_nicely, vertex.size=12, vertex.cex=2, frame.color="Red")
plot(bsub, vertex.label=NA, layout=layout_nicely, vertex.size=12, vertex.cex=2, frame.color="Red")
plot(bsub, vertex.label=NA, layout=layout_nicely, vertex.size=12.5, vertex.cex=2, vertex.color="Red", add=T)
lay <- layout_nicely(bsub)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=12, vertex.cex=2, frame.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=12.5, vertex.cex=2, vertex.color="Red", add=T)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=12.5, vertex.cex=2, vertex.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=12, vertex.cex=2, frame.color="Red", add=T)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=13, vertex.cex=2, vertex.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=12, vertex.cex=2, frame.color="Red", add=T)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=15, vertex.cex=2, vertex.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=12, vertex.cex=2, frame.color="Red", add=T)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=16, vertex.cex=2, vertex.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=12, vertex.cex=2, frame.color="Red", add=T)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=15, vertex.cex=2, vertex.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=11, vertex.cex=2, frame.color="Red", add=T)
lay <- layout_nicely(bsub)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=15, vertex.cex=2, vertex.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=11, vertex.cex=2, frame.color="Red", add=T)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=15, vertex.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=11, add=T)
pdf(file="subplot1.pdf", width=12, height=12)
lay <- layout_nicely(bsub)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=15, vertex.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=11, add=T)
dev.off()
pdf(file="figs/subplot1.pdf", width=12, height=12)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=15, vertex.color="Red")
plot(bsub, vertex.label=NA, layout=lay, vertex.size=11, add=T)
dev.off()
bmsub1Cent
colored_subplot <- function(networknm="M_PL_069_01", flnm="figs/subplot1.pdf", vertcol="red"){
bsub <- dplyr::filter(Birdweb, network_name=="M_PL_069_01") %>% dplyr::select(., species1, species2) %>% unique()
bsub <- igraph::graph_from_data_frame(bsub, directed=F) #Create idgraph object
V(bsub)$component <- components(bsub)$membership
bsub <- delete.vertices(bsub, V(bsub)$component!=which.max(components(bsub)$csize)) #Remove vertices that aren't included in the largest component
bmsub1Cent <- data.frame(between=igraph::centralization.betweenness(bsub)$res,
close=igraph::centralization.closeness(bsub)$res,
node=V(bsub)$name)
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmsub1Cent$close, breaks = seq(min(bmsub1Cent$close, na.rm=T), max(bmsub1Cent$close, na.rm=T), len = 10),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bsub)$color <- colorRampPalette(c("lightblue", "blue"))(10)[ii]
lay <- layout_nicely(bsub)
pdf(file=flnm, width=12, height=12)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=15, vertex.color=vertcol)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=11, add=T)
dev.off()
bmsub1Cent$col <- vertcol
return(bmsub1Cent)
}
colored_subplot()
colored_subplot()
colored_subplot()
colored_subplot <- function(networknm, flnm, vertcol){
bsub <- dplyr::filter(Birdweb, network_name=="M_PL_069_01") %>% dplyr::select(., species1, species2) %>% unique()
bsub <- igraph::graph_from_data_frame(bsub, directed=F) #Create idgraph object
V(bsub)$component <- components(bsub)$membership
bsub <- delete.vertices(bsub, V(bsub)$component!=which.max(components(bsub)$csize)) #Remove vertices that aren't included in the largest component
bmsub1Cent <- data.frame(between=igraph::centralization.betweenness(bsub)$res,
close=igraph::centralization.closeness(bsub)$res,
node=V(bsub)$name)
## Use n equally spaced breaks to assign each value to n-1 equal sized bins
ii <- cut(bmsub1Cent$close, breaks = seq(min(bmsub1Cent$close, na.rm=T), max(bmsub1Cent$close, na.rm=T), len = 10),
include.lowest = TRUE)
## Use bin indices, ii, to select color from vector of n-1 equally spaced colors
V(bsub)$color <- colorRampPalette(c("lightblue", "blue"))(10)[ii]
lay <- layout_nicely(bsub)
pdf(file=flnm, width=12, height=12)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=15, vertex.color=vertcol)
plot(bsub, vertex.label=NA, layout=lay, vertex.size=11, add=T)
dev.off()
bmsub1Cent$col <- vertcol
return(bmsub1Cent)
}
sub1 <- colored_subplot(networknm="M_PL_069_01", flnm="figs/subplot1.pdf", vertcol="red")
sub1 <- colored_subplot(networknm="M_PL_069_01", flnm="figs/subplot1.pdf", vertcol="red")
table(Birdweb$network_name)
sub2 <- colored_subplot(networknm="M_PL_064", flnm="figs/subplot1.pdf", vertcol="orange")
sub2 <- colored_subplot(networknm="M_PL_064", flnm="figs/subplot2.pdf", vertcol="orange")
sub1 <- colored_subplot(networknm="M_PL_069_01", flnm="figs/subplot1.pdf", vertcol="red")
sub2 <- colored_subplot(networknm="M_PL_064", flnm="figs/subplot2.pdf", vertcol="orange")
sub1 <- colored_subplot(networknm="M_PL_069_01", flnm="figs/subplot1.pdf", vertcol="red")
sub1 <- colored_subplot(networknm="M_PL_069_01", flnm="figs/subplot1.pdf", vertcol="red")
set.seed(7)
lay1 <- layout_nicely(bmeta)
pdf(file="figs/bmeta_fig.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=2, vertex.cex=2, frame.color=NA)
dev.off()
V(bmeta)
V(bmeta) %in% sub1$node
table(V(bmeta) %in% sub1$node)
sub1$node
V(bmeta)
V(bmeta)$name %in% sub1$node
V(bmeta)$altcol <- NA
V(bmeta)$altcol[V(bmeta)$name %in% sub1$node]
V(bmeta)$altcol[V(bmeta)$name %in% sub1$node] <- "red"
V(bmeta)$altcol[V(bmeta)$name %in% sub2$node] <- "orange"
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=3, frame.color=NA)
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=3, frame.color=NA, vertex.color="red")
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=3, vertex.color="red")
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=3, vertex.color=V(bmeta)$altcol)
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=3, vertex.color=V(bmeta)$altcol, edge.color=NA)
V(bmeta)$altcol[V(bmeta)$name %in% sub1$node] <- "red"
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=3, vertex.color=V(bmeta)$altcol, edge.color=NA)
V(bmeta)$altcol[V(bmeta)$name %in% sub2$node] <- "orange"
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=3, vertex.color=V(bmeta)$altcol, edge.color=NA)
pdf(file="figs/bmeta_fig2.pdf", width=12, height=12)
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=3, vertex.color=V(bmeta)$altcol, edge.color=NA)
plot(bmeta, vertex.label=NA, layout=lay1, vertex.size=2, frame.color=NA, add=T)
dev.off()
library(plyr)
library(dplyr)
library(snow)
library(metacom)
library(bipartite)
library(igraph)
# load in master NHM data
load('../../NHMmaster/NHMmaster.RData')
locInfo <- read.csv('../../NHMmaster/locationInfo.csv')
load("~/Documents/helmBiogeog/analysis/helmBio.Rdata")
islandInfo <- filter(locInfo, island==1)
locInfo
islandInfo <- filter(locInfo, islands==1)
islandDat <- dat[which(names(dat) %in% islandInfo$Location)]
islandDat <- idat[which(names(idat) %in% islandInfo$Location)]
library(plyr)
library(dplyr)
library(igraph)
library(metacom)
getTau <- function(x) {
rows <- nrow(x)
cols <- ncol(x)
x <- 1 * (x > 0)
Rnumbers <- rep(1:rows,cols)
dstR <- matrix(Rnumbers, nrow=rows)
Cnumbers <- rep(1:cols, each=rows)
dstC <- matrix(Cnumbers, nrow=rows)
dx <- sum(sum(dstR * x))
dy <- sum(sum(dstC * x))
return(dx+dy)
}
dist_make <- function (x, distance_fcn, method=NULL) {
distance_from_idxs <- function (idxs) {
i1 <- idxs[1]
i2 <- idxs[2]
distance_fcn(x[i1,], x[i2,])
}
size <- nrow(x)
d <- apply(utils::combn(size, 2), 2, distance_from_idxs)
attr(d, "Size") <- size
xnames <- rownames(x)
if (!is.null(xnames)) {
attr(d, "Labels") <- xnames
}
attr(d, "Diag") <- FALSE
attr(d, "Upper") <- FALSE
if (!is.null(method)) {
attr(d, "method") <- method
}
class(d) <- "dist"
as.matrix(d)
}
getEta <- function(x) {
nij <- dist_make(x, distance_fcn=function(x,y){
sum(x*y)
})
sumNIJ <- sum(nij[upper.tri(nij)], na.rm=TRUE)
diag(nij) <- NA
rs <- rowSums(x>0)
sumMin <- sum(
apply(combn(1:nrow(nij), 2), 2, function(x){
min(rs[c(x[1], x[2])])
})
)
ret <- sumNIJ / sumMin
return(ret)
}
getSpectral <- function(x){
rows <- nrow(x)
cols <- ncol(x)
tot <- rows+cols
x2 <- matrix(0, tot, tot)
x2[1:rows, (rows + 1):tot] <- x
x2 <- x2 + t(x2)
out <- Re(eigen(x2)$value[1])
return(out)
}
getNestedness <- function(x, sims,
onlyZ=FALSE, measure='nodf'){
if(measure == 'nodf'){
nulls <- metacom::NullMaker(x, sims=sims, method='swap')
nestNulls <- laply(nulls, function(x){
vegan::nestednodf(x)$statistic[3]
})
n <- vegan::nestednodf(x)$statistic[3]
}
if(measure=='spectral'){
nulls <- metacom::NullMaker(x, sims=sims, method='swap')
nestNulls <- laply(nulls, function(x){
getSpectral(x)
})
n <- getSpectral(x)
}
if(measure=='eta'){
nulls <- metacom::NullMaker(x, sims=sims, method='r1')
nestNulls <- laply(nulls, function(x){
getEta(x)
})
n <- getEta(x)
}
zNest <- (mean(nestNulls) - n) / (sd(nestNulls))
pNest <- 2 * pnorm(-abs(zNest))
if(onlyZ){
return(zNest)
}else{
return(c(NODF=n, z=zNest, p=pNest))
}
}
getModularity <- function(x, sims, onlyZ=TRUE){
require(metacom)
require(igraph)
nulls <- metacom::NullMaker(x, sims=sims, method='swap')
iNulls <- lapply(nulls, function(x){
igraph::graph_from_incidence_matrix(x)
})
ix <- igraph::graph_from_incidence_matrix(x)
Qnull <- sapply(iNulls, function(a){
igraph::modularity(cluster_walktrap(a))
})
q <- igraph::modularity(cluster_walktrap(ix))
zMod <- (mean(Qnull) - q) / (sd(Qnull))
pMod <- 2 * pnorm(-abs(zMod))
if(onlyZ){
return(zMod)
}else{
return(c(Q=q, z=zMod, p=pMod))
}
}
islandModDF <- matrix(NA, ncol=3, nrow=length(islandDat))
for(i in 1:length(islandDat)){
if(nrow(islandDat[[i]]) < 5){
print('Oh no!')
}else{
x <- table(islandDat[[i]][,1], islandDat[[i]][,2])
islandModDF[i,] <- unlist(getModularity(x, sims=1000, onlyZ=FALSE))
}
print(i)
}
islandNestDF <- matrix(NA, ncol=3, nrow=length(islandDat))
for(i in 1:length(islandDat)){
if(nrow(islandDat[[i]]) < 5){
print('Oh no!')
}else{
x <- table(islandDat[[i]][,1], islandDat[[i]][,2])
islandNestDF[i,] <- unlist(getNestedness(x, sims=500,
onlyZ=FALSE, measure='eta'))
gc()
}
print(i)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(terra)
library(sf)
library(taxize)
library(rnaturalearthdata)
library(igraph)
assoc <- read.csv(file="../data/pollinator-associations_08.21.2024.csv")
assoc <- dplyr::filter(assoc, taxon_class_name=="Insecta") #filter out small number of non-insect observations
assoc <- dplyr::filter(assoc, quality_grade=="research") #Ensure we only have RG (should be already, but doublecheck)
assoc <- dplyr::filter(assoc, positional_accuracy < 1000) #Remove >1km positional uncertainty
assoc <- dplyr::filter(assoc, taxon_order_name %in% c("Diptera", "Hymenoptera", "Lepidopters", "Coleoptera")) #Grab some of the orders more likely to effectively pollinate
assoc <- dplyr::filter(assoc, taxon_order_name!="Coleoptera" | taxon_family_name %in% c("Elateridae", "Melyridae", "Mordellidae", "Scarabaeidae", "Cantharidae", "Nitidulidae", "Chrysomelidae", "Cerambycidae", "Staphylinidae")) #For the beetles, filter to only families that at least likely have the potential to be effective pollinators (remove ladybugs just hanging out on flowers, for example). Family list from paper above.
plnms <- unique(c(assoc$field.associated.species.with.names.lookup, assoc$field.nectar.plant, assoc$field.name.of.associated.plant)) #grab my different name categories
plnms_rslv <- taxize::tol_resolve(names=plnms) #resolve plantname lookips
load("~/Documents/polleNar/analysis/.RData")
assoc <- assoc %>%
mutate(
plant_partner = coalesce(
field.associated.species.with.names.lookup,
field.nectar.plant,
field.name.of.associated.plant
)
) #There are 3 possible columns where associated plant names may live. This grabs all of them in order of listed preference
assoc <- dplyr::select(plnms_rslv, unique_name, gen, sp, level) %>% dplyr::rename(., plant_partner=unique_name) %>% left_join(assoc, ., by="plant_partner")
plnms_rslv$gen <- gsub( " .*$", "", plnms_rslv$unique_name) #Grab gen (before space)
plnms_rslv$sp <- gsub("^\\S+ ", "", plnms_rslv$unique_name ) #Grab species (presumably after space)
plnms_rslv$sp[plnms_rslv$sp==plnms_rslv$gen] <- NA
plnms_rslv <- dplyr::filter(plnms_rslv, grepl("aceae", gen)==F) #remove groups with plant family ending from the gen column
plnms_rslv <- dplyr::filter(plnms_rslv, is.na(gen)==F #if unkown don't keep it
genera <- taxize::tax_name(sci=dplyr::filter(plnms_rslv, is.na(sp)==T)$gen, get="genus") #Make sure these are actually genera and nod higher-order taxa.
genera <- dplyr::filter(genera, is.na(genus)==F) %>% #Remove missing matches
dplyr::filter(., genus!="Bombus") #Remove an accidental bee
genera <- taxize::tax_name(sci=dplyr::filter(plnms_rslv, is.na(sp)==T)$gen, get="genus") #Make sure these are actually genera and nod higher-order taxa.
dplyr::filter(plnms_rslv, is.na(sp)==T)$gen
dplyr::filter(plnms_rslv, is.na(sp)==T) %>% dplyr::filter(., is.na(gen)==F)
dplyr::filter(plnms_rslv, is.na(sp)==T) %>% dplyr::filter(., is.na(gen)==F)
dplyr::filter(plnms_rslv, is.na(sp)==T) %>% dplyr::filter(., is.na(gen)==F)$gen
dplyr::filter(plnms_rslv, is.na(sp)==T) %>% dplyr::filter(., is.na(gen)==F)
x <- dplyr::filter(plnms_rslv, is.na(sp)==T) %>% dplyr::filter(., is.na(gen)==F)
x$gen
genlist <- dplyr::filter(plnms_rslv, is.na(sp)==T) %>% dplyr::filter(., is.na(gen)==F)
genlist
genera <- taxize::tax_name(sci=genlist$gen, get="genus") #Make sure these are actually genera and nod higher-order taxa.
setwd("~/Documents/diseaseEcology")
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
