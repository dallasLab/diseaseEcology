colnames(georng)
globgeo <- georng %>%
dplyr::group_by(., file) %>%
dplyr::summarise(., globkm=sum(contgeokm.area))
globgeo$node <- globgeo$file
globgeo$node <- gsub("_", " ", globgeo$node)
globgeo$node <- gsub(".csv", "", globgeo$node)
globgeo$node <- paste(toupper(substring(globgeo$node, 1, 1)), substring(globgeo$node, 2), sep="")
globgeo <- dplyr::select(globgeo, -file)
imetaCent <- left_join(imetaCent, globgeo, by="node")
bmetaCent <- left_join(bmetaCent, globgeo, by="node")
imetaCent$type <- NA
imetaCent$type[imetaCent$node %in% InsectMeta$species1] <- "Plant"
imetaCent$type[imetaCent$node %in% InsectMeta$species2] <- "Insect"
bmetaCent$type <- NA
bmetaCent$type[bmetaCent$node %in% BirdMeta$species1] <- "Plant"
bmetaCent$type[bmetaCent$node %in% BirdMeta$species2] <- "Bird"
hist(imetaCent$eig)
hist(imetaCent$close)
imetaCent %>% #dplyr::filter(., close<0.5) %>%
ggplot(., aes(x=scale(log(envarea)), y=close, col=type))+
geom_point()+
geom_smooth(method="lm")+
facet_wrap(~type)+
theme_classic()+
xlab("Scaled Log Enviornmental Area")+
ylab("Closeness Centrality")
bmetaCent %>% dplyr::filter(., close<0.5) %>%
ggplot(., aes(x=scale(log(envarea)), y=close, col=type))+
geom_point()+
geom_smooth(method="lm")+
facet_wrap(~type)+
theme_classic()+
xlab("Scaled Log Enviornmental Area")+
ylab("Closeness Centrality")
hist(scale(log(imetaCent$envarea)))
imetaCentmodat <- imetaCent
imetaCentmodat <- dplyr::filter(imetaCentmodat, close<0.5) #Filter out outliers
inmod <- lm(close~scale(log(envarea))+as.factor(type)+scale(log(globkm)), data=imetaCentmodat)
plot(inmod)
summary(inmod)
cor.test(scale(log(imetaCentmodat$envarea)), scale(log(imetaCentmodat$globkm)))
car::vif(inmod)
bmetaCentmodat <- bmetaCent
bmetaCentmodat <- dplyr::filter(bmetaCentmodat, close<0.5)
#bmod <- lm(close~scale(log(envarea))+as.factor(type)+as.factor(type)*scale(log(envarea))+scale(log(globkm))+as.factor(type)*scale(log(globkm)), data=bmetaCentmodat)
bmod <- lm(close~scale(log(envarea))+as.factor(type)+scale(log(globkm)), data=bmetaCentmodat)
summary(bmod)
plot(bmod)
cor.test(scale(log(bmetaCentmodat$envarea)), scale(log(bmetaCentmodat$globkm)))
car::vif(bmod)
imetaCent %>% dplyr::filter(., close<0.5) %>%
ggplot(., aes(x=scale(log(globkm)), y=close, col=type))+
geom_point()+
geom_smooth(method="lm")+
facet_wrap(~type)+
theme_classic()+
xlab("Scaled Geographic Area")+
ylab("Closeness Centrality")
bmetaCent %>% dplyr::filter(., close<0.5) %>%
ggplot(., aes(x=scale(log(globkm)), y=close, col=type))+
geom_point()+
geom_smooth(method="lm")+
facet_wrap(~type)+
theme_classic()+
xlab("Scaled Geographic Area")+
ylab("Closeness Centrality")
imetaCent$net <- "Insect"
bmetaCent$net <- "Bird"
composite <- rbind(dplyr::select(imetaCent, envarea, globkm, node, type, net, close), dplyr::select(bmetaCent, envarea, globkm, node, type, net, close)) %>% dplyr::filter(., is.na(envarea)==F)
unique(composite$type)
composite$type[composite$type %in% c("Insect", "Bird")] <- "Floral Visitor"
geop1 <- composite %>% dplyr::filter(., close<0.5) %>%
ggplot(., aes(x=scale(log(globkm)), y=close, col=net))+
geom_point(alpha=0.5)+
geom_smooth(method="lm")+
facet_wrap(~type, labeller = labeller(type = c("Floral Visitors", "Plants")))+
theme_classic()+
xlab("Scaled Log Geographic Area")+
ylab("Closeness Centrality")+guides(col=guide_legend(title="MetaNetwork"))+
scale_color_manual(labels = c("Avian-Plant", "Insect-Plant"), values = c("#0F882C", "dodgerblue"))+
theme(legend.position=c(0.11,.81), guide_legend(override.aes=list(fill=NA)))
envp1 <- composite %>% dplyr::filter(., close<0.5) %>%
ggplot(., aes(x=scale(log(envarea)), y=close, col=net))+
geom_point(alpha=0.5)+
geom_smooth(method="lm")+
facet_wrap(~type)+
theme_classic()+
xlab("Scaled Log Environmental Area")+
ylab("Closeness Centrality")+guides(col="none")+
scale_color_manual(labels = c("Avian-Plant", "Insect-Plant"), values = c("#0F882C", "dodgerblue"))
#pdf(file="figs/metaweb_area_scaling.pdf", width=6, height=6)
grid.arrange(geop1, envp1, nrow=2)
#dev.off()
Birdweb <- Birdweb %>%
group_by(latitude, longitude) %>%
mutate(site_index = cur_group_id()) %>%
ungroup()
length(unique(Birdweb$network_name))
length(unique(Birdweb$site_index))
Insectweb <- Insectweb %>%
group_by(latitude, longitude) %>%
mutate(site_index = cur_group_id()) %>%
ungroup()
length(unique(Insectweb$network_name))
length(unique(Insectweb$site_index))
length(unique(Birdweb$site_index))
load(file="data/z_localCent_Zupdated.RDA")
#load(file="data/z_localCent.RDA")
localiz <-localiCent %>% #Take the summary output
group_by(., node) %>% #grab for each node
dplyr::summarise(., nsites=length(unique(site_index)), localmeanclose=mean(close), localmeanclose.z=mean(z.close, na.rm=T)) %>% #Find mean of each nodes average local centralities, both z-tranformed and not
ungroup()
imetaCent <- dplyr::left_join(imetaCent, localiz, by="node") #Add local  measure back to metaWeb version
imetaCent %>% ggplot(., aes(x=localmeanclose,y=close, col=log(nsites)))+
geom_point()+
xlab("Mean Local Closeness")+
ylab("Global Closeness")+theme_classic()
imetaCent %>% ggplot(., aes(x=localmeanclose.z,y=localmeanclose, col=log(nsites)))+
geom_point()+
xlab("Mean Local Closeness (Z-transformed)")+
ylab("Mean Local Closeness (Non-transformed)")+theme_classic()
localbz <-localbCent %>% #Take the summary output
group_by(., node) %>% #grab for each node
dplyr::summarise(., nsites=length(unique(site_index)), localmeanclose=mean(close), localmeanclose.z=mean(z.close, na.rm=T)) %>% #Find mean of each nodes average local centralities, both z-tranformed and not
ungroup()
bmetaCent <- dplyr::left_join(bmetaCent, localbz, by="node") #Add local  measure back to metaWeb version
bmetaCent %>% ggplot(., aes(x=localmeanclose,y=close, col=log(nsites)))+
geom_point()+
xlab("Mean Local Closeness")+
ylab("Global Closeness")+theme_classic()
bmetaCent %>% ggplot(., aes(x=localmeanclose.z,y=localmeanclose, col=log(nsites)))+
geom_point()+
xlab("Mean Local Closeness (Z-transformed)")+
ylab("Mean Local Closeness (Non-transformed)")+theme_classic()
ireps <-localiCent[localiCent$node%in%dplyr::filter(localiz, nsites>9)$node,] %>% #Just grab replicates from species
group_by(., node, site_index) %>% #group by species and site (since we're interested in variance across sites)
dplyr::summarise(., localmeanclose=mean(close), localmeanclose.z=mean(z.close, na.rm=T)) %>% #Find mean of each nodes average local centralities, both z-tranformed and not
ungroup() %>%
left_join(., dplyr::select(localiz, node, nsites), by="node") %>%
ungroup()
breps <-localbCent[localbCent$node%in%dplyr::filter(localbz, nsites>6)$node,] %>% #Just grab replicates from species
group_by(., node, site_index) %>% #group by species and site (since we're interested in variance across sites)
dplyr::summarise(., localmeanclose=mean(close), localmeanclose.z=mean(z.close, na.rm=T)) %>% #Find mean of each nodes average local centralities, both z-tranformed and not
ungroup() %>%
left_join(., dplyr::select(localbz, node, nsites), by="node") %>%
ungroup()
breps <- dplyr::select(bmetaCent, node, close) %>% unique() %>% left_join(breps, ., by="node")
ireps <- dplyr::select(imetaCent, node, close) %>% unique() %>% left_join(ireps, ., by="node")
brep <- ggplot(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=localmeanclose,
fill=nsites), data=breps)+
geom_boxplot(outlier.shape = NA)+
scale_fill_continuous(name = "Number of Sites")+
theme_classic()+
theme(axis.text.x = element_text(angle = 305, vjust = 0.5, hjust=0))+
ylab("Local Closeness")+
xlab("Species")+
geom_point(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=localmeanclose), size=1.5)+
geom_point(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=close), col="red")+ylim(0,1)
irep <- ggplot(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=localmeanclose,
fill=log(nsites)), data=ireps)+
geom_boxplot(outlier.shape = NA)+
scale_fill_continuous(name = "Log Number of Sites")+
theme_classic()+
theme(axis.text.x = element_text(angle = 305, vjust = 0.5, hjust=0))+
ylab("Local Closeness")+
xlab("Species")+
geom_point(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=localmeanclose), size=0.5)+
geom_point(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=close), col="red")+
theme(axis.text.x=element_text(size=6))+ylim(0,1)
brep.z <- ggplot(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=localmeanclose.z,
fill=nsites), data=breps)+
geom_boxplot(outlier.shape = NA)+
scale_fill_continuous(name = "Number of Sites")+
theme_classic()+
theme(axis.text.x = element_text(angle = 305, vjust = 0.5, hjust=0))+
ylab("Local Closeness (Z-transformed)")+
xlab("Species")+
geom_point(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=localmeanclose.z), size=1.5)+
geom_hline(yintercept=1.96, color="red", lty=2)+
geom_hline(yintercept=-1.96, color="red", lty=2)
#+ylim(0,1)
irep.z <- ggplot(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=localmeanclose.z,
fill=log(nsites)), data=ireps)+
geom_boxplot(outlier.shape = NA)+
scale_fill_continuous(name = "Log Number of Sites")+
theme_classic()+
theme(axis.text.x = element_text(angle = 305, vjust = 0.5, hjust=0))+
ylab("Local Closeness (Z-transformed)")+
xlab("Species")+
geom_point(aes(x=factor(node, levels=unique(node[order(nsites, decreasing = T)])), y=localmeanclose.z), size=0.5)+
theme(axis.text.x=element_text(size=6))+
geom_hline(yintercept=1.96, color="red", lty=2)+
geom_hline(yintercept=-1.96, color="red", lty=2)
#pdf(file="figs/localCentralityVariation_z.trans.pdf", width=11, height=8.5)
grid.arrange(brep, brep.z, irep, irep.z, nrow=2)
#dev.off()
composite_local <- rbind(imetaCent, bmetaCent)
geop1_local <- composite_local %>% #dplyr::filter(., close<0.5) %>%
ggplot(., aes(x=scale(log(globkm)), y=localmeanclose.z, col=net))+
geom_point(alpha=0.5)+
geom_smooth(method="lm")+
facet_wrap(~type)+
theme_classic()+
xlab("Scaled Log Environmental Area")+
ylab("Mean Z-Transformed Local Closeness")+guides(col="none")+
scale_color_manual(labels = c("Avian-Plant", "Insect-Plant"), values = c("#0F882C", "dodgerblue"))
envp1_local <- composite_local %>% #dplyr::filter(., close<0.5) %>%
ggplot(., aes(x=scale(log(envarea)), y=localmeanclose.z, col=net))+
geom_point(alpha=0.5)+
geom_smooth(method="lm")+
facet_wrap(~type)+
theme_classic()+
xlab("Scaled Log Environmental Area")+
ylab("Mean Z-Transformed Local Closeness")+guides(col="none")+
scale_color_manual(labels = c("Avian-Plant", "Insect-Plant"), values = c("#0F882C", "dodgerblue"))
#pdf(file="figs/metaweb_area_scaling_local.pdf", width=6, height=6)
grid.arrange(geop1_local, envp1_local, nrow=2)
#dev.off()
imetaCentmodat <- imetaCent
imetaCentmodat <- dplyr::filter(imetaCentmodat, close<0.5) #Filter out outliers
inmod.z <- glm(localmeanclose.z
~scale(log(envarea))+as.factor(type)+scale(log(globkm)), data=imetaCentmodat)
plot(inmod.z)
summary(inmod.z)
cor.test(scale(log(imetaCentmodat$envarea)), scale(log(imetaCentmodat$globkm)))
car::vif(inmod.z)
bmetaCentmodat <- bmetaCent
bmetaCentmodat <- dplyr::filter(bmetaCentmodat, close<0.5)
#bmod <- lm(close~scale(log(envarea))+as.factor(type)+as.factor(type)*scale(log(envarea))+scale(log(globkm))+as.factor(type)*scale(log(globkm)), data=bmetaCentmodat)
bmod.z <- glm(localmeanclose.z~scale(log(envarea))+as.factor(type)+scale(log(globkm)), data=bmetaCentmodat)
summary(bmod.z)
plot(bmod.z)
cor.test(scale(log(bmetaCentmodat$envarea)), scale(log(bmetaCentmodat$globkm)))
car::vif(bmod.z)
Vset <- NULL
Eset <- NULL
bmetaCent_null <- NULL
nsim <- 1000
for(i in 1:nsim){ #Iterate over each local network
for(j in 1:length(unique(Birdweb$site_index))){ #Reshuffle on each local network
temp <- Birdweb[Birdweb$site_index==j,] #grab the local
temp <- dplyr::select(temp, species1, species2) %>% unique() #grab unique interactions
nullsetup <- nullmodel(table(temp), method = "quasiswap") #shuffle setup
out <- simulate(nullsetup, nsim=1) #grab one iteration
rg <- igraph::graph_from_incidence_matrix(out[,,1]) #make it into a graph (easier to extract in nice format)
Vtemp <- as_data_frame(rg, "vertices") %>% unique()
Vset <- rbind(Vset, Vtemp) #add to our total set of vertices
Etemp <- as_data_frame(rg)
Eset <- rbind(Eset, Etemp) #add to our total set of edges
}
Vset <- unique(Vset) #Grab our unique verts
Eset <- unique(Eset) #same for edges
metatemp <- graph_from_data_frame(Eset, directed = FALSE, vertices = Vset$name) #Create our newly shuffled metaweb
#Calculate centrality metrics on the new null web
bmetaCent_temp <- data.frame(between=igraph::centralization.betweenness(metatemp)$res,
close=igraph::centralization.closeness(metatemp)$res,
deg=igraph::centralization.degree(metatemp, mode="all")$res,
eig=igraph::centralization.evcent(metatemp)$vector,
node=V(metatemp)$name,
indexID=i)
bmetaCent_null <- rbind(bmetaCent_null, bmetaCent_temp) #rbind to our set of interactions
}
bmetaCent <- left_join(bmetaCent, dist_bmetaCent_null, by="node")
composite_z <- rbind(dplyr::select(imetaCent, envarea, globkm, node, type, net, close.z), dplyr::select(bmetaCent, envarea, globkm, node, type, net, close.z)) %>% dplyr::filter(., is.na(envarea)==F)
dist_bmetaCent_null
dist_imetaCent_null
Vset <- NULL
Eset <- NULL
bmetaCent_null <- NULL
nsim <- 1000
for(i in 1:nsim){ #Iterate over each local network
for(j in 1:length(unique(Birdweb$site_index))){ #Reshuffle on each local network
temp <- Birdweb[Birdweb$site_index==j,] #grab the local
temp <- dplyr::select(temp, species1, species2) %>% unique() #grab unique interactions
nullsetup <- nullmodel(table(temp), method = "quasiswap") #shuffle setup
out <- simulate(nullsetup, nsim=1) #grab one iteration
rg <- igraph::graph_from_incidence_matrix(out[,,1]) #make it into a graph (easier to extract in nice format)
Vtemp <- as_data_frame(rg, "vertices") %>% unique()
Vset <- rbind(Vset, Vtemp) #add to our total set of vertices
Etemp <- as_data_frame(rg)
Eset <- rbind(Eset, Etemp) #add to our total set of edges
}
Vset <- unique(Vset) #Grab our unique verts
Eset <- unique(Eset) #same for edges
metatemp <- graph_from_data_frame(Eset, directed = FALSE, vertices = Vset$name) #Create our newly shuffled metaweb
#Calculate centrality metrics on the new null web
bmetaCent_temp <- data.frame(between=igraph::centralization.betweenness(metatemp)$res,
close=igraph::centralization.closeness(metatemp)$res,
deg=igraph::centralization.degree(metatemp, mode="all")$res,
eig=igraph::centralization.evcent(metatemp)$vector,
node=V(metatemp)$name,
indexID=i)
bmetaCent_null <- rbind(bmetaCent_null, bmetaCent_temp) #rbind to our set of interactions
}
j <- 1
i <- 1
temp <- Birdweb[Birdweb$site_index==j,] #grab the local
temp <- dplyr::select(temp, species1, species2) %>% unique() #grab unique interactions
nullsetup <- nullmodel(table(temp), method = "quasiswap") #shuffle setup
out <- simulate(nullsetup, nsim=1) #grab one iteration
rg <- igraph::graph_from_incidence_matrix(out[,,1]) #make it into a graph (easier to extract in nice format)
Vtemp <- as_data_frame(rg, "vertices") %>% unique()
rg
as_data_frame(rg, "vertices")
rg
as_data_frame(rg, "vertices")
rg
V(rg)
V(rg) %>% unique()
#Vtemp <- as_data_frame(rg, "vertices") %>% unique()
Vtemp <- V(rg) %>% unique()
Vset <- rbind(Vset, Vtemp) #add to our total set of vertices
Etemp <- as_data_frame(rg)
Etemp <- as_data_frame(E(rg))
E(rg)
as_data_frame(E(rg)
)
Etemp <- as_data_frame(E(rg))
E(rg)
bmetaCent_null <- NULL
Eset <- NULL
Vset <- NULL
temp <- Birdweb[Birdweb$site_index==j,] #grab the local
Birdweb
temp <- dplyr::select(temp, species1, species2) %>% unique() #grab unique interactions
nullsetup <- nullmodel(table(temp), method = "quasiswap") #shuffle setup
out <- simulate(nullsetup, nsim=1) #grab one iteration
rg <- igraph::graph_from_incidence_matrix(out[,,1]) #make it into a graph (easier to extract in nice format)
rg
igraph::graph_from_incidence_matrix(out[,,1])
igraph::graph_from_incidence_matrix(out[,,1])
rg <- igraph::graph_from_incidence_matrix(out[,,1]) #make it into a graph (easier to extract in nice format)
library(dplyr)
Etemp <- as_data_frame(rg)
as_data_frame(rg)
bmetaCent_temp <- data.frame(between=igraph::centralization.betweenness(metatemp)$res,
close=igraph::centralization.closeness(metatemp)$res,
deg=igraph::centralization.degree(metatemp, mode="all")$res,
eig=igraph::centralization.evcent(metatemp)$vector,
node=V(metatemp)$name,
indexID=i)
metatemp <- graph_from_data_frame(Eset, directed = FALSE, vertices = Vset$name) #Create our newly shuffled metaweb
Eset <- unique(Eset) #same for edges
Etemp <- as_data_frame(rg)
rg
edge(rg)
get.edgelist(rg)
Etemp <- as_data_frame(get.edgelist(rg))
Etemp
Vset
Eset <- unique(Eset) #same for edges
Eset <- rbind(Eset, Etemp) #add to our total set of edges
Vset <- NULL
Eset <- NULL
bmetaCent_null <- NULL
nsim <- 1000
for(i in 1:nsim){ #Iterate over each local network
for(j in 1:length(unique(Birdweb$site_index))){ #Reshuffle on each local network
temp <- Birdweb[Birdweb$site_index==j,] #grab the local
temp <- dplyr::select(temp, species1, species2) %>% unique() #grab unique interactions
nullsetup <- nullmodel(table(temp), method = "quasiswap") #shuffle setup
out <- simulate(nullsetup, nsim=1) #grab one iteration
rg <- igraph::graph_from_incidence_matrix(out[,,1]) #make it into a graph (easier to extract in nice format)
#Vtemp <- as_data_frame(rg, "vertices") %>% unique()
Vtemp <- V(rg) %>% unique()
Vset <- rbind(Vset, Vtemp) #add to our total set of vertices
Etemp <- as_data_frame(get.edgelist(rg))
Eset <- rbind(Eset, Etemp) #add to our total set of edges
}
Vset <- unique(Vset) #Grab our unique verts
Eset <- unique(Eset) #same for edges
metatemp <- graph_from_data_frame(Eset, directed = FALSE, vertices = Vset$name) #Create our newly shuffled metaweb
#Calculate centrality metrics on the new null web
bmetaCent_temp <- data.frame(between=igraph::centralization.betweenness(metatemp)$res,
close=igraph::centralization.closeness(metatemp)$res,
deg=igraph::centralization.degree(metatemp, mode="all")$res,
eig=igraph::centralization.evcent(metatemp)$vector,
node=V(metatemp)$name,
indexID=i)
bmetaCent_null <- rbind(bmetaCent_null, bmetaCent_temp) #rbind to our set of interactions
}
as_data_frame(rg)
Etemp <- igraph::as_data_frame(rg)
library(igraph)
library(igraph)
#library(dplyr)
#library(ggplot2)
library(gridExtra)
library(rgbif)
library(curl)
#library(tidyr)
library(jsonlite)
library(tidyverse)
library(taxize)
library(vegan)
library(randomForest)
library(gridExtra)
# define the base url
base_url <- "https://www.web-of-life.es/"
json_url2 <- paste0(base_url,"get_networks.php?interaction_type=Pollination")
WolPols <- jsonlite::fromJSON(json_url2)
Vset <- NULL
Eset <- NULL
bmetaCent_null <- NULL
nsim <- 1000
for(i in 1:nsim){ #Iterate over each local network
for(j in 1:length(unique(Birdweb$site_index))){ #Reshuffle on each local network
temp <- Birdweb[Birdweb$site_index==j,] #grab the local
temp <- dplyr::select(temp, species1, species2) %>% unique() #grab unique interactions
nullsetup <- nullmodel(table(temp), method = "quasiswap") #shuffle setup
out <- simulate(nullsetup, nsim=1) #grab one iteration
rg <- igraph::graph_from_incidence_matrix(out[,,1]) #make it into a graph (easier to extract in nice format)
Vtemp <- as_data_frame(rg, "vertices") %>% unique()
Vset <- rbind(Vset, Vtemp) #add to our total set of vertices
Etemp <- as_data_frame(rg)
Eset <- rbind(Eset, Etemp) #add to our total set of edges
}
Vset <- unique(Vset) #Grab our unique verts
Eset <- unique(Eset) #same for edges
metatemp <- graph_from_data_frame(Eset, directed = FALSE, vertices = Vset$name) #Create our newly shuffled metaweb
#Calculate centrality metrics on the new null web
bmetaCent_temp <- data.frame(between=igraph::centralization.betweenness(metatemp)$res,
close=igraph::centralization.closeness(metatemp)$res,
deg=igraph::centralization.degree(metatemp, mode="all")$res,
eig=igraph::centralization.evcent(metatemp)$vector,
node=V(metatemp)$name,
indexID=i)
bmetaCent_null <- rbind(bmetaCent_null, bmetaCent_temp) #rbind to our set of interactions
}
Vset <- NULL
Eset <- NULL
bmetaCent_null <- NULL
nsim <- 1000
for(i in 1:nsim){ #Iterate over each local network
for(j in 1:length(unique(Birdweb$site_index))){ #Reshuffle on each local network
temp <- Birdweb[Birdweb$site_index==j,] #grab the local
temp <- dplyr::select(temp, species1, species2) %>% unique() #grab unique interactions
nullsetup <- nullmodel(table(temp), method = "quasiswap") #shuffle setup
out <- simulate(nullsetup, nsim=1) #grab one iteration
rg <- igraph::graph_from_incidence_matrix(out[,,1]) #make it into a graph (easier to extract in nice format)
Vtemp <- igraph::as_data_frame(rg, "vertices") %>% unique()
Vset <- rbind(Vset, Vtemp) #add to our total set of vertices
Etemp <- igraph::as_data_frame(rg)
Eset <- rbind(Eset, Etemp) #add to our total set of edges
}
Vset <- unique(Vset) #Grab our unique verts
Eset <- unique(Eset) #same for edges
metatemp <- graph_from_data_frame(Eset, directed = FALSE, vertices = Vset$name) #Create our newly shuffled metaweb
#Calculate centrality metrics on the new null web
bmetaCent_temp <- data.frame(between=igraph::centralization.betweenness(metatemp)$res,
close=igraph::centralization.closeness(metatemp)$res,
deg=igraph::centralization.degree(metatemp, mode="all")$res,
eig=igraph::centralization.evcent(metatemp)$vector,
node=V(metatemp)$name,
indexID=i)
bmetaCent_null <- rbind(bmetaCent_null, bmetaCent_temp) #rbind to our set of interactions
}
dist_bmetaCent_null <- bmetaCent_null %>% dplyr::group_by(., node) %>% dplyr::summarise(., meanclose=mean(close, na.rm=T), sdclose=sd(close, na.rm=T)) #Now that we have a bunch of iteractions, find the distribution
#### Now we repeat for insects
Vset <- NULL
Eset <- NULL
imetaCent_null <- NULL
nsim <- 1000
for(i in 1:nsim){ #Iterate over each local network
for(j in 1:length(unique(Insectweb$site_index))){ #Reshuffle on each local network
temp <- Insectweb[Insectweb$site_index==j,] #grab the local
temp <- dplyr::select(temp, species1, species2) %>% unique() #grab unique interactions
nullsetup <- nullmodel(table(temp), method = "quasiswap") #shuffle setup
if(nullsetup$ncol==1){ #If we don't have at least one record to swap, just skip
next
}
if(nullsetup$nrow==1){
next
}
out <- simulate(nullsetup, nsim=1) #grab one iteration
rg <- igraph::graph_from_incidence_matrix(out[,,1]) #make it into a graph (easier to extract in nice format)
Vtemp <- igraph::as_data_frame(rg, "vertices") %>% unique()
Vset <- rbind(Vset, Vtemp) #add to our total set of vertices
Etemp <- igraph::as_data_frame(rg)
Eset <- rbind(Eset, Etemp) #add to our total set of edges
}
Vset <- unique(Vset) #Grab our unique verts
Eset <- unique(Eset) #same for edges
metatemp <- graph_from_data_frame(Eset, directed = FALSE, vertices = Vset$name) #Create our newly shuffled metaweb
#Calculate centrality metrics on the new null web
imetaCent_temp <- data.frame(between=igraph::centralization.betweenness(metatemp)$res,
close=igraph::centralization.closeness(metatemp)$res,
deg=igraph::centralization.degree(metatemp, mode="all")$res,
eig=igraph::centralization.evcent(metatemp)$vector,
node=V(metatemp)$name,
indexID=i)
imetaCent_null <- rbind(imetaCent_null, imetaCent_temp) #rbind to our set of interactions
}
dist_imetaCent_null <- imetaCent_null %>% dplyr::group_by(., node) %>% dplyr::summarise(., meanclose=mean(close, na.rm=T), sdclose=sd(close, na.rm=T)) #Now that we have a bunch of iterations, find the distribution
#save(dist_imetaCent_null, file="dist_imetaCent_null.Rda")
knitr::opts_chunk$set(echo = TRUE)
Clima
Clima <- geodata::worldclim_global("worldclim", var="bio", res=2.5) #Load in global climate data (just as a mask)
Clima
Clima <- terra::project(Clima, y="EPSG:9822") #Reproject in the same space as our landcover data
setwd("~/Documents/diseaseEcology")
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
setwd("~/Documents/diseaseEcology")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
